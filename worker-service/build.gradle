project.ext {
    CONTAINER_PORT=8090
    IMAGE_NAME="worker-service"

    if (project.hasProperty('host_port')) {
        HOST_PORT="$host_port"
    } else { HOST_PORT=8090 }

    if (project.hasProperty('container_name')) {
        CONTAINER_NAME="$container_name"
    } else { CONTAINER_NAME="worker-service" }
}

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile('org.springframework.boot:spring-boot-devtools')
    runtime('com.h2database:h2')
    compile('org.projectlombok:lombok')
}

task dockerClean(dependsOn: build) {
    doLast {
        exec {
            workingDir './'
            ignoreExitValue true
            commandLine "docker", "rm", "-f", "$project.CONTAINER_NAME"
        }
        exec {
            workingDir './'
            ignoreExitValue true
            commandLine "docker", "rmi", "$project.IMAGE_NAME"
        }
    }
}

task dockerBuild(type:Exec, dependsOn: dockerClean) {
    workingDir './'
    ignoreExitValue true
    commandLine "docker", "build", "--tag=$project.IMAGE_NAME:latest", "--rm=true", "."
}

task dockerRun(type: Exec, dependsOn: dockerBuild) {
    workingDir './'
    ignoreExitValue true
    commandLine "docker", "run", "--name=$project.CONTAINER_NAME", "--publish=$project.HOST_PORT:$project.CONTAINER_PORT", "$project.IMAGE_NAME:latest"
}